!function(){"use strict";var e,r,n,t,o,i,c,a,d={},u={};function l(e){var r=u[e];if(void 0!==r){if(void 0!==r.error)throw r.error;return r.exports}var n=u[e]={id:e,loaded:!1,exports:{}};try{var t={id:e,module:n,factory:d[e],require:l};l.i.forEach((function(e){e(t)})),n=t.module,t.factory.call(n.exports,n,n.exports,t.require)}catch(e){throw n.error=e,e}return n.loaded=!0,n.exports}l.m=d,l.c=u,l.i=[],e=[],l.O=function(r,n,t,o){if(!n){var i=1/0;for(u=0;u<e.length;u++){n=e[u][0],t=e[u][1],o=e[u][2];for(var c=!0,a=0;a<n.length;a++)(!1&o||i>=o)&&Object.keys(l.O).every((function(e){return l.O[e](n[a])}))?n.splice(a--,1):(c=!1,o<i&&(i=o));if(c){e.splice(u--,1);var d=t();void 0!==d&&(r=d)}}return r}o=o||0;for(var u=e.length;u>0&&e[u-1][2]>o;u--)e[u]=e[u-1];e[u]=[n,t,o]},l.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return l.d(r,{a:r}),r},l.d=function(e,r){for(var n in r)l.o(r,n)&&!l.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},l.hu=function(e){return e+"."+l.h()+".hot-update.js"},l.miniCssF=function(e){},l.hmrF=function(){return"runtime."+l.h()+".hot-update.json"},l.h=function(){return"4446a7683aad8c1ae29b"},l.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),l.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},r={},n="chat-app:",l.l=function(e,t,o,i){if(r[e])r[e].push(t);else{var c,a;if(void 0!==o)for(var d=document.getElementsByTagName("script"),u=0;u<d.length;u++){var f=d[u];if(f.getAttribute("src")==e||f.getAttribute("data-webpack")==n+o){c=f;break}}c||(a=!0,(c=document.createElement("script")).charset="utf-8",c.timeout=120,l.nc&&c.setAttribute("nonce",l.nc),c.setAttribute("data-webpack",n+o),c.src=e),r[e]=[t];var s=function(n,t){c.onerror=c.onload=null,clearTimeout(p);var o=r[e];if(delete r[e],c.parentNode&&c.parentNode.removeChild(c),o&&o.forEach((function(e){return e(t)})),n)return n(t)},p=setTimeout(s.bind(null,void 0,{type:"timeout",target:c}),12e4);c.onerror=s.bind(null,c.onerror),c.onload=s.bind(null,c.onload),a&&document.head.appendChild(c)}},l.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e},function(){var e,r,n,t={},o=l.c,i=[],c=[],a="idle",d=0,u=[];function f(e){a=e;for(var r=[],n=0;n<c.length;n++)r[n]=c[n].call(null,e);return Promise.all(r)}function s(){0==--d&&f("ready").then((function(){if(0===d){var e=u;u=[];for(var r=0;r<e.length;r++)e[r]()}}))}function p(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return f("check").then(l.hmrM).then((function(n){return n?f("prepare").then((function(){var t=[];return r=[],Promise.all(Object.keys(l.hmrC).reduce((function(e,o){return l.hmrC[o](n.c,n.r,n.m,e,r,t),e}),[])).then((function(){return r=function(){return e?v(e):f("ready").then((function(){return t}))},0===d?r():new Promise((function(e){u.push((function(){e(r())}))}));var r}))})):f(m()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+a+")")})):v(e)}function v(e){e=e||{},m();var t=r.map((function(r){return r(e)}));r=void 0;var o=t.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return f("abort").then((function(){throw o[0]}));var i=f("dispose");t.forEach((function(e){e.dispose&&e.dispose()}));var c,a=f("apply"),d=function(e){c||(c=e)},u=[];return t.forEach((function(e){if(e.apply){var r=e.apply(d);if(r)for(var n=0;n<r.length;n++)u.push(r[n])}})),Promise.all([i,a]).then((function(){return c?f("fail").then((function(){throw c})):n?v(e).then((function(e){return u.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):f("idle").then((function(){return u}))}))}function m(){if(n)return r||(r=[]),Object.keys(l.hmrI).forEach((function(e){n.forEach((function(n){l.hmrI[e](n,r)}))})),n=void 0,!0}l.hmrD=t,l.i.push((function(u){var v,m,y,g,b=u.module,E=function(r,n){var t=o[n];if(!t)return r;var c=function(c){if(t.hot.active){if(o[c]){var a=o[c].parents;-1===a.indexOf(n)&&a.push(n)}else i=[n],e=c;-1===t.children.indexOf(c)&&t.children.push(c)}else console.warn("[HMR] unexpected require("+c+") from disposed module "+n),i=[];return r(c)},u=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(n){r[e]=n}}};for(var l in r)Object.prototype.hasOwnProperty.call(r,l)&&"e"!==l&&Object.defineProperty(c,l,u(l));return c.e=function(e){return function(e){switch(a){case"ready":f("prepare");case"prepare":return d++,e.then(s,s),e;default:return e}}(r.e(e))},c}(u.require,u.id);b.hot=(v=u.id,m=b,g={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==v,_requireSelf:function(){i=m.parents.slice(),e=y?void 0:v,l(v)},active:!0,accept:function(e,r,n){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)g._acceptedDependencies[e[t]]=r||function(){},g._acceptedErrorHandlers[e[t]]=n;else g._acceptedDependencies[e]=r||function(){},g._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)g._declinedDependencies[e[r]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=g._disposeHandlers.indexOf(e);r>=0&&g._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":r=[],Object.keys(l.hmrI).forEach((function(e){l.hmrI[e](v,r)})),f("ready");break;case"ready":Object.keys(l.hmrI).forEach((function(e){l.hmrI[e](v,r)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(v)}},check:p,apply:h,status:function(e){if(!e)return a;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var r=c.indexOf(e);r>=0&&c.splice(r,1)},data:t[v]},e=void 0,g),b.parents=i,b.children=[],i=[],u.require=E})),l.hmrC={},l.hmrI={}}(),function(){var e;l.g.importScripts&&(e=l.g.location+"");var r=l.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var n=r.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),l.p=e}(),t=function(e,r,n,t){var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=function(i){if(o.onerror=o.onload=null,"load"===i.type)n();else{var c=i&&("load"===i.type?"missing":i.type),a=i&&i.target&&i.target.href||r,d=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");d.code="CSS_CHUNK_LOAD_FAILED",d.type=c,d.request=a,o.parentNode.removeChild(o),t(d)}},o.href=r,document.head.appendChild(o),o},o=function(e,r){for(var n=document.getElementsByTagName("link"),t=0;t<n.length;t++){var o=(c=n[t]).getAttribute("data-href")||c.getAttribute("href");if("stylesheet"===c.rel&&(o===e||o===r))return c}var i=document.getElementsByTagName("style");for(t=0;t<i.length;t++){var c;if((o=(c=i[t]).getAttribute("data-href"))===e||o===r)return c}},i=[],c=[],a=function(e){return{dispose:function(){for(var e=0;e<i.length;e++){var r=i[e];r.parentNode&&r.parentNode.removeChild(r)}i.length=0},apply:function(){for(var e=0;e<c.length;e++)c[e].rel="stylesheet";c.length=0}}},l.hmrC.miniCss=function(e,r,n,d,u,f){u.push(a),e.forEach((function(e){var r=l.miniCssF(e),n=l.p+r,a=o(r,n);a&&d.push(new Promise((function(r,o){var d=t(e,n,(function(){d.as="style",d.rel="preload",r()}),o);i.push(a),c.push(d)})))}))},function(){var e,r,n,t,o,i=l.hmrS_jsonp=l.hmrS_jsonp||{runtime:0},c={};function a(r,n){return e=n,new Promise((function(e,n){c[r]=e;var t=l.p+l.hu(r),o=new Error;l.l(t,(function(e){if(c[r]){c[r]=void 0;var t=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;o.message="Loading hot update chunk "+r+" failed.\n("+t+": "+i+")",o.name="ChunkLoadError",o.type=t,o.request=i,n(o)}}))}))}function d(e){function c(e){for(var r=[e],n={},t=r.map((function(e){return{chain:[e],id:e}}));t.length>0;){var o=t.pop(),i=o.id,c=o.chain,d=l.c[i];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var u=0;u<d.parents.length;u++){var f=d.parents[u],s=l.c[f];if(s){if(s.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([f]),moduleId:i,parentId:f};-1===r.indexOf(f)&&(s.hot._acceptedDependencies[i]?(n[f]||(n[f]=[]),a(n[f],[i])):(delete n[f],r.push(f),t.push({chain:c.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:n}}function a(e,r){for(var n=0;n<r.length;n++){var t=r[n];-1===e.indexOf(t)&&e.push(t)}}l.f&&delete l.f.jsonpHmr,r=void 0;var d={},u=[],f={},s=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in n)if(l.o(n,p)){var h,v=n[p],m=!1,y=!1,g=!1,b="";switch((h=v?c(p):{type:"disposed",moduleId:p}).chain&&(b="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(m=new Error("Aborted because of self decline: "+h.moduleId+b));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+b));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(m=new Error("Aborted because "+p+" is not accepted"+b));break;case"accepted":e.onAccepted&&e.onAccepted(h),y=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(m)return{error:m};if(y)for(p in f[p]=v,a(u,h.outdatedModules),h.outdatedDependencies)l.o(h.outdatedDependencies,p)&&(d[p]||(d[p]=[]),a(d[p],h.outdatedDependencies[p]));g&&(a(u,[h.moduleId]),f[p]=s)}n=void 0;for(var E,_=[],w=0;w<u.length;w++){var I=u[w],k=l.c[I];k&&(k.hot._selfAccepted||k.hot._main)&&f[I]!==s&&!k.hot._selfInvalidated&&_.push({module:I,require:k.hot._requireSelf,errorHandler:k.hot._selfAccepted})}return{dispose:function(){var e;t.forEach((function(e){delete i[e]})),t=void 0;for(var r,n=u.slice();n.length>0;){var o=n.pop(),c=l.c[o];if(c){var a={},f=c.hot._disposeHandlers;for(w=0;w<f.length;w++)f[w].call(null,a);for(l.hmrD[o]=a,c.hot.active=!1,delete l.c[o],delete d[o],w=0;w<c.children.length;w++){var s=l.c[c.children[w]];s&&((e=s.parents.indexOf(o))>=0&&s.parents.splice(e,1))}}}for(var p in d)if(l.o(d,p)&&(c=l.c[p]))for(E=d[p],w=0;w<E.length;w++)r=E[w],(e=c.children.indexOf(r))>=0&&c.children.splice(e,1)},apply:function(r){for(var n in f)l.o(f,n)&&(l.m[n]=f[n]);for(var t=0;t<o.length;t++)o[t](l);for(var i in d)if(l.o(d,i)){var c=l.c[i];if(c){E=d[i];for(var a=[],s=[],p=[],h=0;h<E.length;h++){var v=E[h],m=c.hot._acceptedDependencies[v],y=c.hot._acceptedErrorHandlers[v];if(m){if(-1!==a.indexOf(m))continue;a.push(m),s.push(y),p.push(v)}}for(var g=0;g<a.length;g++)try{a[g].call(null,E)}catch(n){if("function"==typeof s[g])try{s[g](n,{moduleId:i,dependencyId:p[g]})}catch(t){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:p[g],error:t,originalError:n}),e.ignoreErrored||(r(t),r(n))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:p[g],error:n}),e.ignoreErrored||r(n)}}}for(var b=0;b<_.length;b++){var w=_[b],I=w.module;try{w.require(I)}catch(n){if("function"==typeof w.errorHandler)try{w.errorHandler(n,{moduleId:I,module:l.c[I]})}catch(t){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:I,error:t,originalError:n}),e.ignoreErrored||(r(t),r(n))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:I,error:n}),e.ignoreErrored||r(n)}}return u}}}self.webpackHotUpdatechat_app=function(r,t,i){for(var a in t)l.o(t,a)&&(n[a]=t[a],e&&e.push(a));i&&o.push(i),c[r]&&(c[r](),c[r]=void 0)},l.hmrI.jsonp=function(e,r){n||(n={},o=[],t=[],r.push(d)),l.o(n,e)||(n[e]=l.m[e])},l.hmrC.jsonp=function(e,c,u,f,s,p){s.push(d),r={},t=c,n=u.reduce((function(e,r){return e[r]=!1,e}),{}),o=[],e.forEach((function(e){l.o(i,e)&&void 0!==i[e]?(f.push(a(e,p)),r[e]=!0):r[e]=!1})),l.f&&(l.f.jsonpHmr=function(e,n){r&&l.o(r,e)&&!r[e]&&(n.push(a(e)),r[e]=!0)})},l.hmrM=function(){if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(l.p+l.hmrF()).then((function(e){if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))},l.O.j=function(e){return 0===i[e]};var u=function(e,r){var n,t,o=r[0],c=r[1],a=r[2],d=0;if(o.some((function(e){return 0!==i[e]}))){for(n in c)l.o(c,n)&&(l.m[n]=c[n]);if(a)var u=a(l)}for(e&&e(r);d<o.length;d++)t=o[d],l.o(i,t)&&i[t]&&i[t][0](),i[t]=0;return l.O(u)},f=self.webpackChunkchat_app=self.webpackChunkchat_app||[];f.forEach(u.bind(null,0)),f.push=u.bind(null,f.push.bind(f))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,